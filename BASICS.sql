CREATE TABLE TUTORIAL (TID INT NOT NULL AUTO_INCREMENT PRIMARY KEY, 
						TNAME VARCHAR (50) NOT NULL, 
						TAUTHOR VARCHAR(60) NOT NULL, 
						TDATE DATE NOT NULL);
						
INSERT INTO TUTORIAL VALUES(10001,"JAVA", "JJJJ", '2017-01-17');

INSERT INTO TUTORIAL (TNAME, TAUTHOR, TDATE) 
					VALUES("CSS", "CCCC", '2017-01-17'),
							("CS", "CCCC", '2017-01-17');

SELECT * FROM tutorial ORDER BY TNAME DESC;

CREATE TABLE AUTHOR (ANAME VARCHAR (50) NOT NULL, TOTALBOOK INT (5) NOT NULL);

INSERT INTO author VALUE ("cc", 1), 
							("ccc", 5), 
							("ss", 4), 
							("c2c", 8);

INSERT INTO author VALUE ("CCCC", 1), 
							("CC", 5), 
							("AAAAA", 4), 
							("C2C", 8);

SELECT TNAME 
	FROM TUTORIAL T, AUTHOR A 
	WHERE T.TAUTHOR = A.ANAME;

SELECT * FROM TUTORIAL T, AUTHOR A 
		WHERE T.TAUTHOR = A.ANAME;

SELECT * FROM 
		TUTORIAL T LEFT JOIN AUTHOR A 
		ON T.TAUTHOR = A.ANAME;

SELECT * FROM 
		TUTORIAL T RIGHT JOIN AUTHOR A 
		ON T.TAUTHOR = A.ANAME;

SELECT ANAME 
		FROM author 
		WHERE TOTALBOOK IS NULL;

SELECT ANAME 
		FROM author 
		WHERE TOTALBOOK IS NOT NULL;

SELECT * FROM author 
		WHERE TOTALBOOK IS NOT NULL;
		
SELECT * FROM TUTORIAL 
		WHERE TNAME REGEXP '^S';
		
SELECT * FROM tutorial 
		WHERE TAUTHOR REGEXP '^C | S$';
		
SHOW TABLE STATUS;

ALTER TABLE tutorial ENGINE= INNODB;

ALTER TABLE author ENGINE= INNODB;

ALTER TABLE employee 
		ALTER DEPARTMENT SET DEFAULT "CE";
		
ALTER TABLE employee 
		RENAME TO EMP;
		
ALTER TABLE emp 
		RENAME TO EMPLOYEE;
		
CREATE INDEX AUTHOR_INDEX 
		ON TUTORIAL (TAUTHOR);
		
CREATE UNIQUE INDEX EMP_PHONE 
		ON EMPLOYEE (PHONE);
		
ALTER TABLE tutorial 
		ADD INDEX (TNAME);
		
ALTER TABLE tutorial 
		DROP INDEX TNAME;
		
ALTER TABLE employee 
		ADD MOBILE INT (10) AFTER PHONE;

SELECT DISTINCT TAUTHOR 
		FROM tutorial;
		
SELECT COUNT(*) 
		FROM tutorial;
		
SELECT TAUTHOR, COUNT(*) 
		FROM tutorial 
		GROUP BY TAUTHOR;
		
INSERT INTO employee (ENAME,DEPARTMENT,PHONE,MOBILE) 
		VALUES ("AS","MECH", 2115456,0215254), 
		("def","CE",164653,16552), 
		("GRE","EE",54366463,87867143), 
		("TED","MECH",654653,7983235968);
		
SELECT * FROM employee 
		WHERE DEPARTMENT IN ('CE','EC');
		
SELECT * FROM tutorial 
		WHERE TAUTHOR 
		IN (SELECT TAUTHOR FROM clone_tutorial );
		
SELECT ANAME 
		FROM author 
		WHERE TOTALBOOK BETWEEN 4 AND 10;
		
SELECT ANAME 
		FROM author 
		WHERE TOTALBOOK BETWEEN 4 AND 10 
		ORDER BY ANAME;
		
SELECT ANAME 
		FROM author 
		WHERE TOTALBOOK BETWEEN 4 AND 10 
		ORDER BY ANAME DESC;
		
SELECT TNAME ,TAUTHOR FROM tutorial 
		UNION SELECT TNAME, TAUTHOR FROM clone_tutorial;
		
SELECT COUNT(*) 
		FROM employee 
		WHERE DEPARTMENT = 'CE';
		
SELECT MAX(TOTALBOOK) 
		FROM AUTHOR;
		
SELECT ANAME, MAX(TOTALBOOK) 
		FROM AUTHOR 
		GROUP BY ANAME;

SELECT MIN(TOTALBOOK) 
		FROM AUTHOR ;
		
SELECT ANAME, MIN(TOTALBOOK) 
		FROM AUTHOR 
		GROUP BY ANAME;
		
SELECT AVG(TOTALBOOK) 
		FROM author;
		
SELECT SUM(TOTALBOOK) 
		FROM author;
		
SELECT SQRT(SUM(TOTALBOOK)) 
		FROM author;
		
SELECT CONCAT (TNAME, TAUTHOR) 
		FROM tutorial;
		
SELECT ADDDATE('1992-02-15', INTERVAL 30 DAY);

CREATE TABLE CREATURE (ID INT NOT NULL PRIMARY KEY, CNAME VARCHAR(20));

ALTER TABLE CREATURE 
		MODIFY ID INT AUTO_INCREMENT;
		
DELIMITER //
CREATE PROCEDURE p2()
	BEGIN 
		SELECT ANAME FROM AUTHOR;
	END //
DELIMITER ; 

DELIMITER //
CREATE PROCEDURE employee_E1 ()
	LANGUAGE SQL
	NOT DETERMINISTIC
	SQL SECURITY DEFINER
	COMMENT ' A Procedure'
	BEGIN 
		SELECT * FROM employee;
	END //
DELIMITER ;

CALL EMPLOYEE_E1 ();

DELIMITER //
	CREATE PROCEDURE DT ()
	LANGUAGE SQL 
	NOT DETERMINISTIC
	SQL SECURITY DEFINER	
	COMMENT ' A Profedure'
	BEGIN
		SELECT CURDATE();
		SELECT RAND();
	END //
DELIMITER ;

CALL DT ();

DELIMITER //
	CREATE PROCEDURE P5 (IN P INT)
	LANGUAGE SQL 
	NOT DETERMINISTIC
	SQL SECURITY DEFINER
	COMMENT ' A Profedure'
	BEGIN
		IF P = 1 THEN
		SELECT * FROM tutorial;
		ELSE
		SELECT 'WRONG INPUT';
		END IF;
	END //
DELIMITER ;

CALL P5 (1);

DELIMITER //
	CREATE PROCEDURE P7 (OUT P INT)
	LANGUAGE SQL 
	NOT DETERMINISTIC
	SQL SECURITY DEFINER
	COMMENT ' A Profedure'
	BEGIN
		SET P =-5;
	END //
DELIMITER ;

CALL P(@X); SELECT @X;

DELIMITER //
	CREATE PROCEDURE P12 (IN P INT)
BEGIN
DECLARE VAR INT;
SET VAR = P;
REPEAT
INSERT INTO cnt VALUES(VAR);
SET VAR = VAR + 5;
    SET VAR = VAR%2;
    UNTIL VAR >0
    END REPEAT;
END //
DELIMITER ;

CALL P12(5);

CREATE  FUNCTION FC(N INT(3)) 
RETURNS BIGINT DETERMINISTIC 
BEGIN 
DECLARE D INT(2) DEFAULT 1; 
WHILE N > 1 DO 
SET D = D * N; 
SET N = N - 1; 
END WHILE; 
RETURN D*N; 
END;

SELECT FC(5);

DELIMITER //
DROP TRIGGER CNT_ADD //
CREATE TRIGGER CNT_ADD
AFTER INSERT ON creature
FOR EACH ROW
BEGIN
 SET @x = 'Trigger was activated!';
 INSERT INTO cnt VALUES (CEIL(1 + RAND() + RAND() + RAND()), @X); 
END;// 

